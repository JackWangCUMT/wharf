#!/usr/bin/env python

import argparse

from docker import client

def start(args):
    print args.action
    # ensure redis is running
    # store config in redis
    # ensure docker is running
    # check for wharf container, if exists kill and start a new one

    if args.config:
        print "interactive config"
        # interactive configuration
        WHARF_CONTAINER_PORT = 80
        WHARF_HOST_PORT = 80
        WHARF_IP_ADDRESS = "0.0.0.0"
        MAIL_SERVER = "smtp.gmail.com"
        MAIL_PORT = 465
        MAIL_USE_TLS = False
        MAIL_USE_SSL = True
        MAIL_USERNAME = "gmail_email_address"
        MAIL_PASSWORD = "gmail_password"
        DOCKER_PORT = 4243
        REDIS_PORT = 6379
        DOCKER_HOST = "localhost"
        DOMAIN = "localhost"
        REDIS_HOST = "localhost"
        SERVICES_FOLDER = "/wharf/services/"
        UPLOAD_FOLDER = "/wharf/tmp/"
        SECRET_KEY = "EckNi2Fluincawd+"
        SECURITY_PASSWORD_SALT = "S)1<P3_~$XF}DI=#"
        SQLALCHEMY_DATABASE_URI = "sqlite:////tmp/db.sqlite"
        DEFAULT_MAIL_SENDER = "dockerwharf@gmail.com"
        UNIX_DOCKER_PATH = "unix:///var/run/docker.sock"
        while 1:
            choice=raw_input("Enter port for the Wharf container:["+str(WHARF_CONTAINER_PORT)+"]")
            if choice == "":
                break
            try:
                int(choice)
                if int(choice) < 0 or int(choice) > 65535:
                    print choice, "is not a valid range"
                else:
                    WHARF_CONTAINER_PORT = int(choice)
                    break
            except ValueError:
                print choice, "is not a valid port"
        while 1:
            choice=raw_input("Enter port for the Wharf host:["+str(WHARF_HOST_PORT)+"]")
            if choice == "":
                break
            try:
                int(choice)
                if int(choice) < 0 or int(choice) > 65535:
                    print choice, "is not a valid range"
                else:
                    WHARF_HOST_PORT = int(choice)
                    break
            except ValueError:
                print choice, "is not a valid port"
        while 1:
            choice=raw_input("Enter ip address of the Wharf host:["+str(WHARF_IP_ADDRESS)+"]")
            # !! TODO
            #    parse ip address 
            if choice != "":
                WHARF_IP_ADDRESS = choice
            break
        while 1:
            choice=raw_input("Enter SMTP mail server:["+str(MAIL_SERVER)+"]")
            # !! TODO
            #    parse mail host 
            if choice != "":
                MAIL_SERVER = choice
            break
        while 1:
            choice=raw_input("Enter port for the mail server:["+str(MAIL_PORT)+"]")
            if choice == "":
                break
            try:
                int(choice)
                if int(choice) < 0 or int(choice) > 65535:
                    print choice, "is not a valid range"
                else:
                    MAIL_PORT = int(choice)
                    break
            except ValueError:
                print choice, "is not a valid port"
        while 1:
            choice=raw_input("Use TLS?:["+str(MAIL_USE_TLS)+"]")
            if choice == "":
                break
            try:
                if choice == "True" or choice == "False":
                    MAIL_USE_TLS = bool(choice)
                    break
                else:
                    print choice, "is not True or False"
            except:
                print choice, "is not True or False"
        while 1:
            choice=raw_input("Use SSL?:["+str(MAIL_USE_SSL)+"]")
            if choice == "":
                break
            try:
                if choice == "True" or choice == "False":
                    MAIL_USE_SSL = bool(choice)
                    break
                else:
                    print choice, "is not True or False"
            except:
                print choice, "is not True or False"
        while 1:
            choice=raw_input("Enter mail username:["+str(MAIL_USERNAME)+"]")
            if choice != "":
                MAIL_USERNAME = choice
            break
        while 1:
            choice=raw_input("Enter mail password:["+str(MAIL_PASSWORD)+"]")
            if choice != "":
                MAIL_PASSWORD = choice
            break
        while 1:
            choice=raw_input("Enter port for docker:["+str(DOCKER_PORT)+"]")
            if choice == "":
                break
            try:
                int(choice)
                if int(choice) < 0 or int(choice) > 65535:
                    print choice, "is not a valid range"
                else:
                    DOCKER_PORT = int(choice)
                    break
            except ValueError:
                print choice, "is not a valid port"
        while 1:
            choice=raw_input("Enter port for redis:["+str(REDIS_PORT)+"]")
            if choice == "":
                break
            try:
                int(choice)
                if int(choice) < 0 or int(choice) > 65535:
                    print choice, "is not a valid range"
                else:
                    REDIS_PORT = int(choice)
                    break
            except ValueError:
                print choice, "is not a valid port"
        while 1:
            choice=raw_input("Enter path for services:["+str(SERVICES_FOLDER)+"]")
            # !! TODO verify a valid path
            if choice != "":
                SERVICES_FOLDER = choice
            break
        while 1:
            choice=raw_input("Enter path for uploads:["+str(UPLOAD_FOLDER)+"]")
            # !! TODO verify a valid path
            if choice != "":
                UPLOAD_FOLDER = choice
            break
        while 1:
            choice=raw_input("Enter secret key:["+str(SECRET_KEY)+"]")
            if choice != "":
                SECRET_KEY = choice
            break
        while 1:
            choice=raw_input("Enter password salt:["+str(SECURITY_PASSWORD_SALT)+"]")
            if choice != "":
                SECURITY_PASSWORD_SALT = choice
            break
        while 1:
            choice=raw_input("Enter database URI:["+str(SQLALCHEMY_DATABASE_URI)+"]")
            if choice != "":
                SQLALCHEMY_DATABASE_URI = choice
            break
        while 1:
            choice=raw_input("Enter mail sender:["+str(DEFAULT_MAIL_SENDER)+"]")
            if choice != "":
                DEFAULT_MAIL_SENDER = choice
            break
        while 1:
            choice=raw_input("Enter unix docker path:["+str(UNIX_DOCKER_PATH)+"]")
            if choice != "":
                UNIX_DOCKER_PATH = choice
            break
        print WHARF_CONTAINER_PORT
        print WHARF_HOST_PORT
        print WHARF_IP_ADDRESS
        print MAIL_SERVER 
        print MAIL_PORT
        print MAIL_USE_TLS
        print MAIL_USE_SSL
        print MAIL_USERNAME
        print MAIL_PASSWORD
        print DOCKER_PORT
        print REDIS_PORT
        print DOCKER_HOST
        print DOMAIN
        print REDIS_HOST
        print SERVICES_FOLDER
        print UPLOAD_FOLDER
        print SECRET_KEY
        print SECURITY_PASSWORD_SALT
        print SQLALCHEMY_DATABASE_URI
        print DEFAULT_MAIL_SENDER
        print UNIX_DOCKER_PATH
    else:
        print "no interactive config"
        # look for pre-existing configuration file
    if args.file:
        print args.file
        # check that file exists
    else:
        print "use default file location"
    if args.test:
        print "don't run wharf"
    else:
        print "run wharf"
    if args.verbose:
        print "be verbose!"
    else:
        print "be quiet!"
    return

def restart(args):
    print args.action
    # check for config
    # ensure redis is running
    # ensure docker is running
    # check for wharf container, if exists kill and start a new one
    if args.verbose:
        print "be verbose!"
    else:
        print "be quiet!"
    if args.test:
        print "nothing to do in testing mode!"
    return

def stop(args):
    print args.action
    # stop redis
    # stop docker
    # kill wharf container
    if args.verbose:
        print "be verbose!"
    else:
        print "be quiet!"
    if args.test:
        print "nothing to do in testing mode!"
    return

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('-c', '--config',
                        help="interactive configuration",
                        action="store_true", default=False)
    parser.add_argument('-f', '--file',
                        help="path to configuration file", default='wharf.conf')
    parser.add_argument('-t', '--test',
                        help="does not actually start wharf, just tests the \
                              configuration",
                        action="store_true", default=False)
    parser.add_argument('-v', '--verbose',
                        help="increase output verbosity",
                        action="store_true", default=False)
    parser.add_argument('action', choices={'start', 'stop', 'restart'},
                        help="starts/restart/stops required services for \
                              wharf, default: start",
                        nargs='?', default='start')
    args = parser.parse_args()

    if args.action == 'start':
        start(args)
    elif args.action == 'restart':
        restart(args)
    elif args.action == 'stop':
        stop(args)

if __name__ == '__main__':
    main() 
